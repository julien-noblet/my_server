name: blocky

services:
  blocky:
    image: spx01/blocky:latest
    container_name: blocky
    depends_on:
      blocky_postgres:
        condition: service_healthy
        restart: true
      traefik:
        condition: service_healthy
    volumes:
      - blocky_config:/app/config.yml:ro # Blocky configuration file
      # - ../queryLogs:/logs # we use postgresql
      - ../denylists:/app/denylists/
      - ../allowlists:/app/allowlists/
    environment:
      TZ: Europe/Paris
    ports:
      - '53:53/tcp'     # DNS TCP
      - '53:53/udp'     # DNS UDP
      - '4000:4000/tcp' # Blocky API
    networks:
      - blocky_internal # Internal network for postgresql
      - blocky          # Internal network DNS
      - public          # Public network for external access
      - traefik         # Network for communication with the traefik reverse proxy and get lists
    restart: unless-stopped
    labels:
      prometheus.job: blocky
    cap_add:
      - NET_BIND_SERVICE
    cap_drop:
      - all
    dns: 1.1.1.1 # Use Cloudflare DNS as upstream
    hostname: blocky
    security_opt:
      - no-new-privileges:true

  blocky_postgres:
    image: 'pgautoupgrade/pgautoupgrade:17-alpine'
    container_name: blocky_postgres
    hostname: blocky_postgres
    volumes:
      - blocky_postgres:/var/lib/postgresql/data/
      - ../backups/blocky_postgres.sql:/docker-entrypoint-initdb.d/postgres.sql:ro
    env_file:
      .env
    environment:
      TZ: Europe/Paris
      POSTGRES_USER: ${BLOCKY_POSTGRES_USER} # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: ${BLOCKY_POSTGRES_PASSWORD} # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: blocky # The PostgreSQL default database (automatically created at first launch)
    # ports:
    #   - '5432:5432'
    networks:
      - blocky_internal
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "blocky" ]
      interval: 10s
      start_period: 30s
    #cap_add:
    #  - NET_ADMIN
    #  - SYS_PTRACE
    #cap_drop:
    #  - all
    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.025'
          memory: 64M
    security_opt:
      - no-new-privileges:true

networks:
  blocky:
    # Give DNS!!!
    internal: true
    name: blocky_network

  blocky_internal:
    internal: true
    name: blocky_internal
volumes:
  blocky_config:
    driver: local
    driver_opts:
      type: none
      device: ./blocky
      o: bind
  blocky_postgres:


